
// Задачі
// Ось кілька задач різного рівня складності, які поєднують обидві теми. Спробуйте розв'язати їх самостійно.

// Задача 1: Простий калькулятор (if...else if...else)
// Створіть невеликий скрипт, який:

// Оголошує три змінні: a = 10, b = '5', operator = '+'.
// Перевіряє значення змінної operator за допомогою конструкції if...else if...else.
// Якщо operator дорівнює '+', виводить в консоль суму a та b.
// Якщо operator дорівнює '-', виводить різницю a та b.
// Якщо operator дорівнює '*', виводить добуток a та b.
// В іншому випадку (блок else), виводить повідомлення "Невідомий оператор".
// Важливо: зверніть увагу на те, як JavaScript обробляє операції з рядком '5'. Чи потрібно перетворювати його на число?

// const a = 10,
//       b = '5',
//       operator = '*';

// if (operator === '+') {
//     console.log(+a + +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else if (operator === '-') {
//     console.log(+a - +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else if (operator === '*') {
//     console.log(+a * +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else {
//     console.log('Unknown operator');
// }


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// Задача 2: Перевірка оцінки (if...else)
// Створіть скрипт, який:

// Оголошує змінну grade і присвоює їй рядок '75'.
// Використовуючи конструкцію if...else, перевіряє, чи є оцінка (змінна grade) прохідною. Припустимо, що прохідний бал — 60 або більше.
// Якщо умова істинна, виводить в консоль "Прохідний бал.".
// Якщо умова хибна, виводить "Непрохідний бал.".
// Важливо: щоб порівняння спрацювало коректно, вам доведеться явно перетворити рядок grade на число.

// const grade = '75';

// if (Number(grade) >= 60) {    // явне перетворення типу в число для уникнення несподіванок через глобальну функцію Number
//     console.log('Passing grade!');
// } else {
//     console.log('Not a passing grade');
// }

// Причина, чому grade.toNumber() не працює, полягає в тому, що toNumber() не є стандартним методом для примітивного типу даних string (рядків) у JavaScript.
// Коли ви оголошуєте const grade = '75';, grade є просто рядком. Рядкові значення мають багато вбудованих методів (наприклад, length, toUpperCase(), substring() тощо), але вони не мають методу toNumber().


// та ж задача з використанням тернароного оператора мій варіант:
// const resultGrade = Number(grade) >= 60 ? console.log('Passing grade!') : console.log('Not a passing grade');

// та ж задача з використанням тернарного оператора виправлений варіант Gemini (з поясненням):
//зазвичай тернарний оператор використовується для присвоєння значення змінній на основі умови, а не для виконання побічних ефектів (як console.log).
// Наприклад, більш типовим використанням було б:
// const message = Number(grade) >= 60 ? 'Passing grade!' : 'Not a passing grade';
// console.log(message);
//У вашому випадку resultGrade отримає значення, яке повертає console.log() (а це undefined), але сам console.log() все одно виконається. Це не помилка, але це не найпоширеніший спосіб використання тернарного оператора.


// -------------------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Вік у рядку (if)
// Створіть скрипт, який:

// Оголошує змінну ageText і присвоює їй значення '25'.
// Використовує умовний оператор if для перевірки, чи є вік, вказаний у змінній ageText, більшим за 18.
// Якщо умова істинна, виводить "Доступ дозволено.".
// Важливо: переконайтеся, що ви явно перетворюєте рядок на число перед порівнянням, щоб уникнути помилок.

// const ageText = '25';

// if (+ageText > 18) {   // явне перетворення в число за допомогою унарного оператора +
//     console.log('Access allowed');
// }


// ---------------------------------------------------------------------------------------------------------------------------------


// Задача 1: Перевірка статусу замовлення
// Напишіть скрипт, який:

// Оголошує змінну orderStatus і присвоює їй рядок 'pending'.
// Оголошує змінну hasShipped і присвоює їй логічне значення false.
// Використовує конструкцію if...else if...else для перевірки статусу:
// Якщо orderStatus дорівнює 'completed', виводить в консоль "Замовлення виконано.".
// Якщо orderStatus дорівнює 'pending' І hasShipped є false, виводить "Замовлення очікує відправки.".
// В іншому випадку виводить "Статус замовлення невідомий або відправлено.".
// Пограйтеся: Спробуйте змінити значення orderStatus на 'completed' або hasShipped на true, щоб побачити, як змінюється вивід.


// const orderStatus = 'pending';
// const hasShipped = false;

// if (orderStatus === 'completed') {
//     console.log('Order completed');
// } else if (orderStatus === 'pending' && hasShipped === false) {
//     console.log('Order is waiting for sending');
// } else {
//     console.log('Unknown or shipped order status');
// }


// -------------------------------------------------------------------------------------------------------------------------------------



// Задача 2: Порівняння чисел з різними типами
// Створіть скрипт, який:

// Оголошує дві змінні: num1 = 100 (число) та num2 = '100' (рядок).
// Використовує умовний оператор if для перевірки, чи num1 дорівнює num2 за допомогою оператора ==. Виведіть відповідне повідомлення.
// Використовує інший умовний оператор if для перевірки, чи num1 суворо дорівнює num2 за допомогою оператора ===. Виведіть відповідне повідомлення.
// Поясніть у коментарях до коду, чому результати цих двох порівнянь відрізняються (або не відрізняються).


// const num1 = 100, 
//       num2 = '100';

// if (num1 == num2) {  // поверне true через неявне приведення типів, де рядок '100' перетворюється на число 100 перед порівнянням.
//     console.log('Не строге порівняння!');
// }

// if (num1 === num2) {  // поверне false, оскільки суворе порівняння перевіряє не тільки значення, але й тип даних, і в цьому випадку number не дорівнює string
//     console.log('Строге порівняння');
// }


// --------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Доступ до сайту за віком та дозволом
// Напишіть скрипт, який:

// Оголошує змінну userAge і присвоює їй рядок '17'.
// Оголошує змінну hasPermission і присвоює їй рядок 'true' (саме рядок).
// Використовує умовний оператор if з логічним оператором && (І) для перевірки двох умов:
// userAge має бути більшим або дорівнювати 18.
// hasPermission має бути істинним (тобто, перетвореним на булеве true).
// Якщо обидві умови істинні, виводить "Доступ до сайту дозволено.".
// В іншому випадку (використовуючи else), виводить "Доступ до сайту заборонено.".
// Підказка: Не забудьте про приведення типів для userAge та hasPermission перед їх використанням в умовах.

// const userAge = '21',
//       hasPermission = 'true';

// if (+userAge >= 18 && hasPermission === 'true') {
//     console.log('Access to web-site is allowed');
// } else {
//     console.log('Access to web-site is not allowed');
// }

// console.log(Boolean(hasPermission));


// Пояснення Gemini чому Boolean(hasPermission) та !!hasPermission не працюють 
// оператор !!  та глобальна функція Boolean() перетворює значення на булевий тип, ґрунтуючись на тому, чи є воно "truthy" або "falsy". Будь-який не порожній рядок (включно з 'true', 'false', 'hello') є "truthy". Тому !!'true' завжди повертатиме true, оскільки рядок 'true' сам по собі не є порожнім.
// Однак, коли ви використовуєте Boolean(), ви явно вказуєте JavaScript, що хочете отримати булеве значення. У випадку з рядками, якщо ви хочете перетворити рядок 'true' на булеве true, а рядок 'false' на булеве false, вам потрібно буде зробити це вручну або за допомогою умовної логіки, оскільки Boolean('false') теж поверне true (бо рядок 'false' не порожній і є "truthy").
// Ваша змінна hasPermission має значення 'true' (рядок). Якщо ви хочете, щоб вона стала булевим true саме тому, що її вміст є рядком "true", а не просто тому, що вона не порожня, вам потрібно буде порівняти її вміст
// hasPermission === 'true'


// --------------------------------------------------------------------------------------------------------------------------------

// Задача 1: Загальний доступ
// Створіть скрипт, який:

// Оголошує дві змінні: isLoggedIn = true та hasPermission = false.
// Використовуючи оператор &&, перевіряє, чи є користувач авторизованим і чи має він дозвіл.
// Якщо умова істинна, виводить "Доступ дозволено.".
// В іншому випадку виводить "Доступ заборонено.".
// Пограйтеся: Спробуйте змінити значення змінних, щоб побачити, як це впливає на результат.

// const isLoggedIn = true,
//       hasPermission = false;

// if (isLoggedIn && hasPermission) {  // якщо isLoggedIn true та hasPermission true то доступ дозволено
//     console.log('Доступ дозволено!');
// } else {
//     console.log('Доступ заборонено!');
// }

// -------------------------------------------------------------------------------------------------------------------


// Задача 2: Вільний час
// Напишіть скрипт, який:

// Оголошує дві змінні: isWeekend = true та isHoliday = false.
// Використовуючи оператор ||, перевіряє, чи сьогодні вихідний або святковий день.
// Якщо умова істинна, виводить "Можна відпочивати.".
// В іншому випадку виводить "Час працювати.".

// const isWeekend = true,
//       isHoliday = false;

// if (isWeekend || isHoliday) {  // якщо isWeekend true або isHoliday true (один з них) то Можна відпочивати
//     console.log('Мона відпочивати');
// } else {
//     console.log('Час працювати');
// }


// --------------------------------------------------------------------------------------------------------------------------

// Задача 3: Складний пароль
// Напишіть скрипт, який:

// Оголошує змінну password = 'Pa$$w0rd'.
// Оголошує дві змінні, які будуть перевіряти певні умови: hasUpperCase = false та hasSpecialChar = true.
// Використовує логічний оператор && для перевірки, чи довжина пароля більша за 8 символів і чи містить він великі літери (hasUpperCase) і чи містить він спеціальні символи (hasSpecialChar).
// Якщо всі умови істинні, виводить "Пароль надійний.".
// В іншому випадку виводить "Пароль не надійний.".
// Підказка: Використовуйте вбудовану властивість length для рядків, щоб отримати довжину пароля.

// const password = 'Pa$$w0rd';
// const hasUpperCase = false,
//       hasSpecialChar = true;

// if (password.length > 8 && hasUpperCase && hasSpecialChar) {  // якщо всі(кожна) умови true то пароль надійний
//     console.log('Пароль надійний!');
// } else {
//     console.log('Пароль не надійний!');
// }


// ---------------------------------------------------------------------------------------------------------------------

// Задача 1: Перевірка права на знижку
// Створіть скрипт, який:

// Оголошує змінні: isMember = false, orderTotal = 150 та isFirstTimeCustomer = true.
// Використовуючи комбінацію логічних операторів, перевіряє умову для отримання знижки:
// Знижку отримує клієнт, який є учасником програми (isMember) або сума його замовлення (orderTotal) більша за 100 і він є новим клієнтом (isFirstTimeCustomer).
// Якщо умова істинна, виводить "Клієнт має право на знижку.".
// В іншому випадку виводить "Клієнт не має права на знижку.".
// Підказка: Будьте уважні до порядку виконання операцій. Якщо потрібно, використовуйте круглі дужки.

// const isMember = false;
// const orderTotal = 150;
// const isFirstTimeCostumer = true;

// if (isMember || (orderTotal > 100 && isFirstTimeCostumer)) {  // якщо isMember true або (orderTotal > 100 та isFirstTimeCostumer true) клієнт має знижку
//     console.log('Клієнт має право на знижку.');
// } else {
//     console.log('Клієнт не має права на знижку.');
// }


// Задача 2: Визначення назви користувача (коротке замикання)
// Створіть скрипт, який:

// Оголошує змінні: userLoggedIn = null та defaultUser = 'Гість'.
// Використовує логічний оператор || для присвоєння значення змінній currentUsername.
// Якщо userLoggedIn має значення, currentUsername має отримати це значення.
// Якщо userLoggedIn є "falsy" (наприклад, null), currentUsername має отримати значення defaultUser.
// Виведіть значення currentUsername в консоль.
// Пограйтеся: Спробуйте змінити userLoggedIn на рядок, наприклад 'Іван'. Як це вплине на результат завдяки механізму "короткого замикання"?

// варіант 1 з if...else
// const userLoggedIn = undefined;
// const defaultUser = 'Гість';
// let currentUsername = '';

// if (userLoggedIn) {
//     currentUsername = userLoggedIn;
// } else {
//     currentUsername = defaultUser;
// }
// console.log(currentUsername);

//варіант 2 з логічним оператором ||

// const userLoggedIn = null;
// const defaultUser = 'Гість';
// let currentUsername = userLoggedIn || defaultUser;  // currentUsername буде = ім'я (якщо воно є в userLoggedIn) або Гість (якщо в userLoggedIn нема імені)
// console.log(currentUsername);

// -------------------------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Доступ до вмісту
// Напишіть скрипт, який:

// Оголошує змінні: userRole = 'admin', isSubscriptionActive = false та isBetaTester = true.
// Використовує комбінацію && та || для перевірки доступу:
// Доступ дозволено, якщо користувач має роль 'admin' АБО його підписка активна (isSubscriptionActive) І він є бета-тестером (isBetaTester).
// Якщо доступ дозволено, виводить "Доступ до секретного контенту дозволено.".
// В іншому випадку виводить "Доступ заборонено.".
// Підказка: Ретельно продумайте, як згрупувати умови, щоб логіка відповідала завданню.


// const userRole = 'AdmiN';
// const isSubscriptionActive = false;
// const isBetaTester = true;

// if (userRole.toLocaleLowerCase() === 'admin' || (isSubscriptionActive && isBetaTester)) {
//     console.log('Доступ до секретного контенту дозволено.');
// } else {
//     console.log('Доступ заборонено.');
// }

// ----------------------------------------------------------------------------------------------------------------------------


// Задача 1: Вхід у систему
// Створіть скрипт, який перевіряє можливість входу користувача.
// Оголосіть змінні: username = 'user', password = 'password123', isUserActive = true.
// Напишіть умову, яка перевіряє:
// Логін — 'user' І пароль — 'password123' І користувач активний.
// Якщо всі умови істинні, виведіть "Вхід успішний.".
// В іншому випадку виведіть "Помилка входу.".
// Пограйтеся: Спробуйте змінити значення однієї зі змінних, щоб побачити, як це впливає на результат.

// const userName = 'User';
// const password = 'password123';
// const isUserActive = true;

// if (userName.toLowerCase() === 'user' && password === 'password123' && isUserActive) {
//     console.log('Вхід успішний.');
// } else {
//     console.log('Помилка входу.');
// }

// ----------------------------------------------------------------------------------------------------------------------

// Задача 2: Доступ до преміум-контенту
// Напишіть скрипт, який перевіряє доступ до преміум-контенту.
// Оголосіть змінні: isPremium = true, hasCoupon = false, orderPrice = 90.
// Використайте комбінацію логічних операторів для перевірки:
// Користувач має доступ, якщо він є преміум-користувачем АБО він має купон ТА сума його замовлення більша за 100.
// Якщо умова істинна, виведіть "Доступ до преміум-контенту дозволено.".
// В іншому випадку виведіть "Доступ заборонено.".
// Пограйтеся: Спробуйте змінити значення змінних, щоб перевірити різні сценарії.

// const isPremium = true;
// const hasCoupon = false;
// const orderPrice = 90;

// if (isPremium || (hasCoupon && orderPrice > 100)) {
//     console.log('Доступ до преміум-контенту дозволено.');
// } else {
//     console.log('Доступ заборонено.');
// }

// ---------------------------------------------------------------------------------------------------------------


// Задача 3: Перевірка наявності даних
// Напишіть скрипт, який використовує "коротке замикання" для перевірки наявності даних.
// Оголосіть змінні: userName = 'Іван', userEmail = '', userPhone = 0.
// Використайте логічний оператор && для перевірки, чи є всі три змінні truthy.
// Якщо всі три змінні є truthy, виведіть "Всі дані наявні.".
// В іншому випадку, виведіть "Недостатньо даних.".
// Підказка: Не використовуйте явне порівняння === true.

// const userName = 'Іван';
// const userEmail = '';
// const userPhone = 0;

// if (userName && userEmail && userPhone) {
//     console.log('Всі дані наявні.');
// } else {
//     console.log('Недостатньо даних.');
// }


// --------------------------------------------------------------------------------------------------------------------------


/**
 * ЗАВДАННЯ 1: Цикл `for` та оператор `if`
 * Наша попередня розмова була про добуток чисел від -5 до 10.
 * Тут є аналогічне завдання, але з іншим діапазоном.
 * Порахуйте суму всіх цілих чисел у діапазоні від -3 до 7,
 * але пропустіть число 0. Використайте цикл `for` та оператор `if`.
 * Після виконання, виведіть результат у консоль.
 */
// let sum = 0;

// for (let i = -3; i <= 7; i++) {
//   if (i === 0) {
//     continue;
//   }
//   sum += i;
// }

// console.log("Результат завдання 1 (сума): ", sum); // Очікуваний результат: 22


// -------------------------------------------------------

/**
 * ЗАВДАННЯ 2: Цикл `while`
 * Створіть змінну `i` зі значенням 5.
 * Використайте цикл `while`, щоб віднімати 1 від `i` на кожній ітерації.
 * Цикл має виконуватись, поки `i` не стане меншим або дорівнюватиме 0.
 * Всередині циклу виведіть поточне значення `i`.
 */
// let i = 5;

// while(i > 0) {
//     console.log(i);
//     i -= 1;
// }

// console.log("Результат завдання 2: цикл завершено.");


// -------------------------------------------------------

/**
 * ЗАВДАННЯ 3: Цикл `do...while`
 * Цей цикл завжди виконується хоча б один раз.
 * Створіть змінну `x` зі значенням 10.
 * Використайте цикл `do...while` так, щоб він виконав блок коду
 * один раз, навіть якщо умова `x < 5` не виконується з самого початку.
 * У тілі циклу виведіть `x` та потім відніміть від нього 1.
 */
// let x = 10;
// do {
//     console.log(x);
//     x--;
// } while (x < 5)

// console.log("Результат завдання 3: цикл завершено.");


// -------------------------------------------------------

/**
 * ЗАВДАННЯ 4: `break`
 * Використайте цикл `for`, щоб перебирати числа від 1 до 100.
 * Як тільки ви знайдете перше число, яке ділиться на 17 без залишку,
 * виведіть його в консоль і негайно зупиніть цикл за допомогою `break`.
 */
// for (let i = 1; i <= 100; i++) {
//     if (i % 17 === 0) {
//         console.log(i);
//         break;
//     }
// }

// console.log("Результат завдання 4: цикл завершено."); // Очікуваний результат: 17


// -------------------------------------------------------

/**
 * ЗАВДАННЯ 5: `continue`
 * Використайте цикл `for` для виведення чисел від 1 до 20.
 * Але за допомогою оператора `continue` пропустіть всі парні числа
 * (ті, що діляться на 2 без залишку).
 * Тобто, в консолі мають бути лише непарні числа.
 */
// for (let i = 1; i <= 20; i++) {
//     if (i % 2 === 0) {
//         continue;
//     }
//     console.log(i);
// }

// console.log("Результат завдання 5: цикл завершено.");



/**
 * ЗАВДАННЯ 1: Задача "FizzBuzz"
 * Напишіть цикл, який перебирає числа від 1 до 100.
 * Для кожного числа, виконайте наступні умови:
 * 1. Якщо число ділиться на 3 без залишку, виведіть "Fizz".
 * 2. Якщо число ділиться на 5 без залишку, виведіть "Buzz".
 * 3. Якщо число ділиться і на 3, і на 5 без залишку, виведіть "FizzBuzz".
 * 4. В усіх інших випадках просто виведіть саме число.
 *
 * Використайте цикл `for` та умовні оператори `if...else if...else`.
 */
// console.log("--- ЗАВДАННЯ 1: FizzBuzz ---");

// for (let i = 1; i <= 100; i++) {
//     if (i % 3 === 0 && (i % 5 === 0)) {
//         console.log('FizzBuzz');
//     } else if (i % 3 === 0) {
//         console.log('Fizz');
//     } else if ((i % 5 === 0)) {
//         console.log('Buzz');
//     } else {
//         console.log(i);
//     }
// }

// -------------------------------------------------------

/**
 * ЗАВДАННЯ 2: Пошук простого числа
 * Напишіть код, який перевірить, чи є число 29 простим.
 * Просте число - це число, яке ділиться лише на 1 та на себе.
 * Ваша логіка має перевіряти, чи є у числа інші дільники.
 * Якщо ви знайдете хоча б один дільник, ви можете зупинити перевірку.
 *
 * Використайте цикл `for` та оператор `break`.
 */
// console.log("\n--- ЗАВДАННЯ 2: Пошук простого числа ---");
// const numberToCheck = 7;
// let isPrime = true;

// // варіант 1 (рахуємо від 2 бо будь яке число ділиться на 1 тоді умова if буде true і цикл завершиться)
// // i < numberToCheck (а не <=) тому що будь яке число ділиться на себе тоді умова if буде true і цикл завершиться
// for(let i = 2; i < numberToCheck; i++) {

//     if (numberToCheck % i === 0) {
//         isPrime = false;
//         break;
//     }
// }

// // варіант 2 (за допомогою функції Math.sqrt)
// // Перевіряти дільники достатньо лише до квадратного кореня числа. 
// // Наприклад, якщо число 100, то його дільники не можуть бути більшими за 50. 
// // корінь квадратий від числа 100 це 10 (тому що 10 * 10 = 100) тобто 2 * 10 = 20, 3*10 = 30 ... 10 * 10 = 100 - це не просте число
// // корінь квадратний від 7 це 2,64...., тобто нам досить перевірити лише чи 7 ділиться на 2
// // корінь квадратиний від 15 це 3,87..., ттобто нам досить перевірити чи 15 ділиться на 2 і на 3 без остачі - ділиться на 1 на 3 і на саме себе, тому 15 це не порсте число
// for(let i =2; i <= Math.sqrt(numberToCheck); i++) {

//     if (numberToCheck % i === 0) {
//         isPrime = false;
//         break;
//     }
// }


// if (isPrime) {
//   console.log(`${numberToCheck} - це просте число.`);
// } else {
//   console.log(`${numberToCheck} - це не просте число.`);
// }


// -------------------------------------------------------

/**
 * ЗАВДАННЯ 3: Обчислення факторіала
 * Напишіть цикл, який обчислить факторіал числа 5.
 * Факторіал числа - це добуток усіх натуральних чисел до цього числа включно (наприклад, 5! = 1 * 2 * 3 * 4 * 5).
 *
 * Використайте цикл `for`.
 */

// Варіант 1:
// console.log("\n--- ЗАВДАННЯ 3: Факторіал числа ---");
// const factorialNumber = 5;
// let factorialResult = 1;

// for (let i = 1; i <= factorialNumber; i++) {
//     factorialResult *= i;
// }


// console.log(`Факторіал числа ${factorialNumber} дорівнює ${factorialResult}.`); // Очікуваний результат: 120


// Варіант 2:
// console.log("\n--- ЗАВДАННЯ 3: Факторіал числа ---");
// const factorialNumber = 5;
// let factorialResult = 1;
// let factorialCounter = 1;

// while (factorialCounter <= factorialNumber) {
//     factorialResult *= factorialCounter;
//     factorialCounter++;
// }

// console.log(`Факторіал числа ${factorialNumber} дорівнює ${factorialResult}.`); // Очікуваний результат: 120

// -------------------------------------------------------

/**
 * ЗАВДАННЯ 4: Обробка введення до певного значення
 * Вам надано масив з числами, який симулює введення користувача.
 * Використайте цикл `while`, щоб обчислити суму всіх чисел у масиві.
 * Цикл має зупинитися, коли зустрінеться число 0.
 * Важливо: число 0 не повинно бути включене в загальну суму.
 *
 * Використайте цикл `while` та оператор `break`.
 */
// console.log("\n--- ЗАВДАННЯ 4: Обробка введення ---");
// const userInputs = [10, 5, 20, 8, 0, 15, 3];
// let currentSum = 0;
// let currentIndex = 0;

// while (currentIndex < userInputs.length) {
//     if (userInputs.at(currentIndex) === 0) {   // або (userInputs[currentIndex])
//         break;
//     }
//     currentSum += userInputs.at(currentIndex);
//     currentIndex++;
// }


// console.log(`Загальна сума чисел до 0: ${currentSum}.`); // Очікуваний результат: 43


// -------------------------------------------------------------------------------------------------------------

// Задача 1: Перевірка діапазону
// Напишіть скрипт, який перевіряє, чи знаходиться число num у діапазоні від 10 до 20 або від 40 до 50.
// Оголосіть змінну num = 15.
// Використайте логічні оператори && та || для перевірки обох діапазонів одночасно.
// Якщо умова істинна, виведіть "Число знаходиться в одному з діапазонів.".
// В іншому випадку виведіть "Число не знаходиться в жодному з діапазонів.".

// const num = 15;

// if ((num >= 10 && num <= 20) || (num >= 40 && num <= 50)) {
//     console.log('Число знаходиться в одному з діапазонів.');
// } else {
//     console.log('Число не знаходиться в жодному з діапазонів.');
// }

// -------------------------------------------------------------------------------------------------------------------

// Задача 2: Повнолітній, але не для алкоголю
// Напишіть скрипт, який:
// Оголошує змінну age = 21 та isClubMember = false.
// Перевіряє, чи є особа повнолітньою (старше 18), але не є членом клубу.
// Якщо умова істинна, виведіть "Доступ дозволено, але не можна купувати алкоголь.".
// В іншому випадку виведіть "Доступ заборонено або обмежено.".


// const age = 21;
// const isClubMember = false;

// if (age > 18 && !isClubMember) {
//     console.log('Доступ дозволено, але не можна купувати алкоголь.');
// } else {
//     console.log('Доступ заборонено або обмежено.');
// }


// -----------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Перевірка складних умов для входу
// Напишіть скрипт, який перевіряє, чи може користувач увійти на сайт.
// Умови для входу:
// Користувач має бути авторизований (isLoggedIn = true).
// І він має бути або адміністратором (isAdmin = true), або мати спеціальний токен (token = 'valid_token').
// Оголосіть змінні: isLoggedIn = true, isAdmin = false, token = 'invalid_token'.
// Використайте логічні оператори && та || для створення єдиної, складної умови.
// Якщо умова істинна, виведіть "Вхід успішний!".
// В іншому випадку виведіть "Недостатньо прав для входу.".


// const isLoggedIn = true;
// const isAdmin = false;
// const token = 'invalid_token';

// if (isLoggedIn && (isAdmin || token === 'valid_token')) {
//     console.log('Вхід успішний!');
// } else {
//     console.log('Недостатньо прав для входу.');
// }


// ----------------------------------------------------------------------------------------------------------------------------------------


// Задача 4: Погода та активність
// Напишіть скрипт, який допоможе визначити, чи варто йти гуляти.
// Умови:
// Температура має бути в межах від 15 до 25 градусів Цельсія (temperature = 20).
// І не має йти дощ (isRaining = false).
// АБО має бути вихідний день (isWeekend = true), незалежно від погоди.
// Оголосіть змінні: temperature = 20, isRaining = false, isWeekend = true.
// Створіть умову для перевірки всіх цих факторів.
// Якщо можна йти гуляти, виведіть "Чудовий день для прогулянки!".
// В іншому випадку виведіть "Залишаємось вдома.".

// const temperature = 20;
// const isRaining = false;
// const isWeekend = true;

// if (((temperature > 15 && temperature < 25) && !isRaining) || isWeekend) {
//     console.log('Чудовий день для прогулянки!');
// } else {
//     console.log('Залишаємось вдома.');
// }


// ---------------------------------------------------------------------------------------------------------------------------------------

// Задача 1: Перевірка віку та статус
// Напишіть код, який:
// Оголошує змінну age = 15.
// Використовує тернарний оператор, щоб присвоїти змінній message один з двох рядків:
// Якщо age менше 18, message має бути "Неповнолітній".
// Якщо age 18 або більше, message має бути "Повнолітній".
// Виводить message у консоль.
// Пограйтеся: Змініть age на 20 і перевірте, як зміниться результат.

// const age = 21;
// const message = age >= 18 ? 'Повнолітній' : 'Неповнолітній';
// console.log(message);

// ---------------------------------------------------------------------------------------------------------------------------------------

// Задача 2: Привітання з оцінкою
// Напишіть код, який:
// Оголошує змінну name = 'Олена' та grade = 88.
// Використовує тернарний оператор, щоб визначити, чи оцінка є прохідною. Вважайте, що прохідний бал — 70. Збережіть результат (наприклад, "пройшов" або "не пройшов") у змінній status.
// Використовує шаблонний літерал для створення повного речення, яке виводиться в консоль. Повідомлення має містити ім'я, оцінку та статус, наприклад:
// Вітаю, Олена! Ваша оцінка 88. Ви пройшли іспит.
// Пограйтеся: Змініть grade на 65 і подивіться, як зміниться повідомлення.

// const userName = 'Олена';
// const grade = 70;
// const gradeStatus = grade >= 70 ? 'пройшли' : 'не пройшли';

// console.log(`Вітаю, ${userName}! Ваша оцінка ${grade}. Ви ${gradeStatus} іспит!`);


// ----------------------------------------------------------------------------------------------------------------------------------------


// Задача 1: Перевірка права на знижку
// Напишіть код, який перевіряє, чи має клієнт право на знижку.
// Оголосіть змінні:
// isLoyaltyMember = true
// hasCoupon = false
// purchaseAmount = 150
// Використовуйте оператор if, щоб перевірити наступні умови:
// Клієнт є учасником програми лояльності (isLoyaltyMember) і сума покупки більша за 100.
// АБО клієнт має купон (hasCoupon).
// Якщо одна з умов істинна, використайте шаблонний літерал, щоб вивести в консоль: "Вітаємо! Ви отримуєте знижку!".
// В іншому випадку виведіть "На жаль, знижка не застосована.".

// const isLoyaltyMember = false;
// const hasCoupon = true;
// const purchaseAmount = 50;

// if ((isLoyaltyMember && purchaseAmount > 100) || hasCoupon) {
//     console.log(`Вітаємо! Ви отримуєте знижку`);
// } else {
//     console.log(`На жаль, знижка не застосована`);
// }

// ---------------------------------------------------------------------------------------------------------------------------------------------

// Задача 2: Статус користувача
// Напишіть код, який динамічно визначає статус користувача.
// Оголосіть змінні:
// isAdmin = false
// isModerator = true
// userName = 'Марина'
// Використовуйте тернарний оператор (можете вкладати один в одного, якщо потрібно), щоб присвоїти змінній userStatus один з трьох рядків: "Адміністратор", "Модератор" або "Звичайний користувач".
// Використайте шаблонний літерал, щоб вивести в консоль повідомлення, яке включає ім'я користувача та його статус. Наприклад: "Привіт, Марина! Ваш статус: Модератор.".


// const isAdmin = false;
// const isModerator = false;
// const userName = 'Марина';
// const userStatus = (isAdmin  ? 'Адміністратор' : isModerator ? 'Модератор' : 'Звичайний користувач');
// console.log(`Привіт, ${userName}! Ваш статус: ${userStatus}`);


// -----------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Вітання до свята
// Напишіть код, який виводить вітання залежно від поточної дати.
// Оголосіть змінну today = 'Новий рік'.
// Використовуйте ланцюжок if...else if...else, щоб перевірити значення today і вивести відповідне вітання:
// Якщо today === 'Новий рік', виведіть: "З Новим роком!".
// Якщо today === 'Різдво', виведіть: "Веселого Різдва!".
// Якщо today === 'Великдень', виведіть: "Христос воскрес!".
// У всіх інших випадках виведіть: "Привіт, гарного дня!".
// Пограйтеся: Змініть значення today на "Різдво" та інші варіанти, щоб перевірити, як працює ваш код.


// const today = 'Різдво'

// if (today === 'Новий рік') {
//     console.log(`З Новим роком!`);
// } else if (today === 'Різдво') {
//     console.log(`Веселого Різдва!`);
// } else if (today === 'Великдень') {
//     console.log(`Христос Воскрес!`);
// } else {
//     console.log(`Привіт, гарного дня!`);
// }

// --------------------------------------------------------------------------------------------------------------------



// Завдання 1: Звичайна функція (Function Declaration)
// Створіть функцію з назвою isEven, яка приймає один параметр number. Функція повинна повертати true, якщо число парне, і false, якщо непарне.

// function isEven(number) {
//     return number % 2 === 0;
// }

// console.log(isEven(4));


// // рішення 2

// const isEven2 = number => number % 2 === 0;
// console.log(isEven2(7));


// Завдання 2: Вираз функції (Function Expression)
// Створіть функцію як вираз, що називається doubleNumber. Вона повинна приймати один параметр num та повертати його значення, помножене на 2.

// const doubleNumber = function(num) {
//     return num * 2;
// }
// console.log(doubleNumber(15));


// // рішення 2
// const doubleNumber2 = num => num * 2;
// console.log(doubleNumber2(6));


// Завдання 3: Стрілкова функція (Arrow Function)
// Перепишіть функцію з попереднього завдання як стрілкову. Назвіть її tripleNumber. Вона має приймати num та повертати його значення, помножене на 3.

// const tripleNumber = num => num * 3;
// console.log(tripleNumber(3));


// Завдання 4: Стрілкова функція з коротким записом
// Створіть стрілкову функцію getSquare, яка приймає один параметр x. Використайте короткий запис (без фігурних дужок та return), щоб функція повертала квадрат числа x.

// const getSquare = x => x * x;
// console.log(getSquare(5));

// Завдання 5: Значення за замовчуванням
// Створіть функцію greeting, яка приймає два параметри: name та message. Встановіть для message значення за замовчуванням 'Привіт!'. Функція повинна повертати рядок, що містить ім'я та повідомлення.

// const greeting = function (name, message = 'Привіт') {
//     return `${message}, ${name}!`
// }
// console.log(greeting('Анна'));


// Завдання 6: Значення за замовчуванням та стрілкова функція
// Створіть стрілкову функцію power, яка приймає base та exponent. Встановіть для exponent значення за замовчуванням 2. Функція має повертати base в степені exponent.

// const power = (base, exponent = 2) => base ** exponent;
// console.log(power(3, 3));


// Завдання 7: Вираз як значення за замовчуванням
// Створіть функцію logTime, яка приймає параметр time. Встановіть для time значення за замовчуванням, яке є результатом виклику функції getFormattedTime(). Функція logTime повинна просто виводити time в консоль.

// Ось допоміжна функція getFormattedTime():

// JavaScript

// function getFormattedTime() {
//   const now = new Date();
//   return `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}`;
// }


// const logTime = (time = getFormattedTime()) => time
// console.log(logTime());


// Завдання 8: Функція, що повертає іншу функцію
// Створіть функцію createMultiplier, яка приймає один параметр factor. Ця функція повинна повертати нову стрілкову функцію, яка, у свою чергу, приймає параметр number та повертає number помножений на factor.

// function createMultiplier(factor) {
//     const newNumber = number => number * factor;
//     return newNumber;
// }
// console.log(createMultiplier(10) (2));  // перший арг піде в зовішню функцію, 2 арг піде у внутрішню функцію


// додаткові варіанти з поясненням :
// /**
//  * Ця функція є "фабрикою" для інших функцій.
//  * Вона приймає "factor" і повертає нову функцію, яка буде множити
//  * будь-яке число на цей "factor".
//  *
//  * @param {number} factor - число, на яке будемо множити.
//  * @returns {function(number): number} - повертає нову функцію.
//  */
// function createMultiplier(factor) {
//     // Внутрішня функція, яка має доступ до "factor" з зовнішньої області видимості.
//     const newNumber = number => number * factor;
    
//     // Ми повертаємо саму функцію, а не результат її виконання.
//     return newNumber;
// }

// // Крок 1: Викликаємо зовнішню функцію `createMultiplier` і передаємо їй аргумент 5.
// // Вона повертає нову функцію, яка "запам'ятала" (через замикання)
// // що її "factor" дорівнює 5. Ми зберігаємо цю нову функцію у змінній.
// const multiplyBy5 = createMultiplier(5);

// // Крок 2: Тепер змінна `multiplyBy5` містить нашу "нову" функцію.
// // Ми можемо викликати її з іншим аргументом, наприклад, 10.
// // Вона виконає `10 * 5`.
// const result1 = multiplyBy5(10); // 50
// console.log(result1); // Виведе: 50

// // Крок 3: Ми можемо створити й інші множники з тим же кодом!
// // Наприклад, множник на 3.
// const multiplyBy3 = createMultiplier(3);
// const result2 = multiplyBy3(20); // 60
// console.log(result2); // Виведе: 60

// // Або ж можна зробити все в одному рядку (хоча це менш читабельно):
// // Спочатку викликаємо `createMultiplier(10)`
// // Отримаємо функцію, і одразу ж викликаємо її з аргументом 2.
// console.log(createMultiplier(10)(2)); // Виведе: 20





// Завдання 9: Комбінація функцій
// Створіть дві функції: add(a, b) та subtract(a, b). Кожна з них повинна повертати відповідний результат. Потім створіть функцію calculate(a, b, operation), яка приймає два числа та функцію-операцію як третій параметр. Викличте її для додавання та віднімання.



// function add(a, b) {
//     return a + b;
// }

// function substract(a, b) {
//     return a - b;
// }

// /**
//  * Performs the appropriate mathematical operation (+ or -)
//  * depending on the value of the operator parameter by calling
//  * the helper functions add or substract.
//  * @param {number} a - The first operand.
//  * @param {number} b - The second operand.
//  * @param {string} operator - The mathematical symbol for the operation ('+' or '-').
//  * @returns {number|string} The result of the operation or an error message.
//  */

// function calculate(a, b, operator) {

//     if (operator === '+') {
//         return add(a, b);
//     } else if (operator === '-') {
//         return substract(a, b)
//     } else {
//         return `Unexpected operator`
//     }

// }
// console.log(calculate(10, 5, '-'));


// Завдання 10: Функція з динамічною кількістю аргументів
// Створіть функцію sumAll, яка приймає необмежену кількість числових аргументів за допомогою оператора rest (...args). Функція повинна повертати суму всіх переданих чисел.

// /**
//  * @function sumAll
//  * Sums the unlimited quantity of arguments passed to a function
//  * @param  {...number} args - collection of numbers to be added
//  * @returns {number} Total sum of all arguments
//  */


// const sumAll = function (...args) {
//     let sum = 0;
//     for (const num of args) {
//         sum += num;
//     }
//     return sum;
// }

// console.log(sumAll(2, 2, 2, 2));

// -------------------------------------------------------------------------------------------------------------------------------------

// /**
//  * Ваше завдання: Додати повний JSDoc-коментар для цієї функції.
//  * Опишіть, що вона робить, які параметри приймає та що повертає.
//  */

// /**
//  * Function calculates the amount of discount
//  * @param {number} price - the clear price of product.
//  * @param {number} discountPercentage - the discount percentage
//  * @returns {number|string} - discounted price or error message
//  */
// function calculateDiscountedPrice(price, discountPercentage) {
//   // Розраховує ціну з урахуванням знижки
//   if (discountPercentage < 0 || discountPercentage > 100) {
//     return 'Invalid discount percentage';
//   }
//   const discountAmount = (price * discountPercentage) / 100;
//   return price - discountAmount;
// }

// // ---

// /**
//  * Ваше завдання: Документувати цей метод.
//  * Вкажіть, що це метод класу, та опишіть, що він повертає.
//  */


// class User {
//   constructor(firstName, lastName) {
//     this.firstName = firstName;
//     this.lastName = lastName;
//   }

//   /**
//    * @method getFullName
//    * @returns {string} full user name composed of two properties
//    */
//   getFullName() {
//     // Повертає повне ім'я користувача (ім'я та прізвище)
//     return `${this.firstName} ${this.lastName}`;
//   }
// }

// // ---

// /**
//  * Ваше завдання: Додати JSDoc до асинхронної функції.
//  * Опишіть її призначення, що вона повертає (проміс), та які можуть виникнути помилки.
//  */

// /**
//  * Fetches user data from a remote source.
//  * @async
//  * @param {string} userId - The unique identifier of the user.
//  * @returns {Promise<object>} - A Promise that resolves with a user data object on success.
//  * @throws {Error} If the request fails or data is unavailable.
//  */
// async function fetchUserData(userId) {
//   const isAvailable = Math.random() > 0.5;
//   if (!isAvailable) {
//     throw new Error('User data is currently unavailable.');
//   }

//   // Імітує запит до API та повертає дані користувача
//   return {
//     id: userId,
//     name: 'Jane Doe',
//     email: 'jane.doe@example.com'
//   };
// }

// // ---

// /**
//  * Ваше завдання: Документувати цю функцію та її параметр-коллбек.
//  * Поясніть, що `callback` очікує два аргументи: `item` та `index`.
//  */

// /**
//  * This callback is invoked for each item in an array.
//  * @callback ItemProcessor
//  * @param {*} item - The current array item.
//  * @param {number} index - The index of the current item.
//  * @param {Array<*>} array - The original array.
//  */

// /**
//  * Iterates over an array and applies a callback function to each element.
//  * @param {Array<*>} arr - The array to be processed.
//  * @param {ItemProcessor} callback - The function to be called for each item.
//  */
// function processArrayWithCallback(arr, callback) {
//   // Проходить по масиву та для кожного елемента викликає коллбек-функцію
//   for (let i = 0; i < arr.length; i++) {
//     callback(arr[i], i);
//   }
// }


// --------------------------------------------------------------------------------------------------------------------------