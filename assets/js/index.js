
// Задачі
// Ось кілька задач різного рівня складності, які поєднують обидві теми. Спробуйте розв'язати їх самостійно.

// Задача 1: Простий калькулятор (if...else if...else)
// Створіть невеликий скрипт, який:

// Оголошує три змінні: a = 10, b = '5', operator = '+'.
// Перевіряє значення змінної operator за допомогою конструкції if...else if...else.
// Якщо operator дорівнює '+', виводить в консоль суму a та b.
// Якщо operator дорівнює '-', виводить різницю a та b.
// Якщо operator дорівнює '*', виводить добуток a та b.
// В іншому випадку (блок else), виводить повідомлення "Невідомий оператор".
// Важливо: зверніть увагу на те, як JavaScript обробляє операції з рядком '5'. Чи потрібно перетворювати його на число?

// const a = 10,
//       b = '5',
//       operator = '*';

// if (operator === '+') {
//     console.log(+a + +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else if (operator === '-') {
//     console.log(+a - +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else if (operator === '*') {
//     console.log(+a * +b);   // тут для універсальності перетворюю значення кожної змінної в число за доопмогою унарного оператора +  в кожній гілці перед тим як обчислювати
// } else {
//     console.log('Unknown operator');
// }


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



// Задача 2: Перевірка оцінки (if...else)
// Створіть скрипт, який:

// Оголошує змінну grade і присвоює їй рядок '75'.
// Використовуючи конструкцію if...else, перевіряє, чи є оцінка (змінна grade) прохідною. Припустимо, що прохідний бал — 60 або більше.
// Якщо умова істинна, виводить в консоль "Прохідний бал.".
// Якщо умова хибна, виводить "Непрохідний бал.".
// Важливо: щоб порівняння спрацювало коректно, вам доведеться явно перетворити рядок grade на число.

// const grade = '75';

// if (Number(grade) >= 60) {    // явне перетворення типу в число для уникнення несподіванок через глобальну функцію Number
//     console.log('Passing grade!');
// } else {
//     console.log('Not a passing grade');
// }

// Причина, чому grade.toNumber() не працює, полягає в тому, що toNumber() не є стандартним методом для примітивного типу даних string (рядків) у JavaScript.
// Коли ви оголошуєте const grade = '75';, grade є просто рядком. Рядкові значення мають багато вбудованих методів (наприклад, length, toUpperCase(), substring() тощо), але вони не мають методу toNumber().


// та ж задача з використанням тернароного оператора мій варіант:
// const resultGrade = Number(grade) >= 60 ? console.log('Passing grade!') : console.log('Not a passing grade');

// та ж задача з використанням тернарного оператора виправлений варіант Gemini (з поясненням):
//зазвичай тернарний оператор використовується для присвоєння значення змінній на основі умови, а не для виконання побічних ефектів (як console.log).
// Наприклад, більш типовим використанням було б:
// const message = Number(grade) >= 60 ? 'Passing grade!' : 'Not a passing grade';
// console.log(message);
//У вашому випадку resultGrade отримає значення, яке повертає console.log() (а це undefined), але сам console.log() все одно виконається. Це не помилка, але це не найпоширеніший спосіб використання тернарного оператора.


// -------------------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Вік у рядку (if)
// Створіть скрипт, який:

// Оголошує змінну ageText і присвоює їй значення '25'.
// Використовує умовний оператор if для перевірки, чи є вік, вказаний у змінній ageText, більшим за 18.
// Якщо умова істинна, виводить "Доступ дозволено.".
// Важливо: переконайтеся, що ви явно перетворюєте рядок на число перед порівнянням, щоб уникнути помилок.

// const ageText = '25';

// if (+ageText > 18) {   // явне перетворення в число за допомогою унарного оператора +
//     console.log('Access allowed');
// }


// ---------------------------------------------------------------------------------------------------------------------------------


// Задача 1: Перевірка статусу замовлення
// Напишіть скрипт, який:

// Оголошує змінну orderStatus і присвоює їй рядок 'pending'.
// Оголошує змінну hasShipped і присвоює їй логічне значення false.
// Використовує конструкцію if...else if...else для перевірки статусу:
// Якщо orderStatus дорівнює 'completed', виводить в консоль "Замовлення виконано.".
// Якщо orderStatus дорівнює 'pending' І hasShipped є false, виводить "Замовлення очікує відправки.".
// В іншому випадку виводить "Статус замовлення невідомий або відправлено.".
// Пограйтеся: Спробуйте змінити значення orderStatus на 'completed' або hasShipped на true, щоб побачити, як змінюється вивід.


// const orderStatus = 'pending';
// const hasShipped = false;

// if (orderStatus === 'completed') {
//     console.log('Order completed');
// } else if (orderStatus === 'pending' && hasShipped === false) {
//     console.log('Order is waiting for sending');
// } else {
//     console.log('Unknown or shipped order status');
// }


// -------------------------------------------------------------------------------------------------------------------------------------



// Задача 2: Порівняння чисел з різними типами
// Створіть скрипт, який:

// Оголошує дві змінні: num1 = 100 (число) та num2 = '100' (рядок).
// Використовує умовний оператор if для перевірки, чи num1 дорівнює num2 за допомогою оператора ==. Виведіть відповідне повідомлення.
// Використовує інший умовний оператор if для перевірки, чи num1 суворо дорівнює num2 за допомогою оператора ===. Виведіть відповідне повідомлення.
// Поясніть у коментарях до коду, чому результати цих двох порівнянь відрізняються (або не відрізняються).


// const num1 = 100, 
//       num2 = '100';

// if (num1 == num2) {  // поверне true через неявне приведення типів, де рядок '100' перетворюється на число 100 перед порівнянням.
//     console.log('Не строге порівняння!');
// }

// if (num1 === num2) {  // поверне false, оскільки суворе порівняння перевіряє не тільки значення, але й тип даних, і в цьому випадку number не дорівнює string
//     console.log('Строге порівняння');
// }


// --------------------------------------------------------------------------------------------------------------------------------------------

// Задача 3: Доступ до сайту за віком та дозволом
// Напишіть скрипт, який:

// Оголошує змінну userAge і присвоює їй рядок '17'.
// Оголошує змінну hasPermission і присвоює їй рядок 'true' (саме рядок).
// Використовує умовний оператор if з логічним оператором && (І) для перевірки двох умов:
// userAge має бути більшим або дорівнювати 18.
// hasPermission має бути істинним (тобто, перетвореним на булеве true).
// Якщо обидві умови істинні, виводить "Доступ до сайту дозволено.".
// В іншому випадку (використовуючи else), виводить "Доступ до сайту заборонено.".
// Підказка: Не забудьте про приведення типів для userAge та hasPermission перед їх використанням в умовах.

// const userAge = '21',
//       hasPermission = 'true';

// if (+userAge >= 18 && hasPermission === 'true') {
//     console.log('Access to web-site is allowed');
// } else {
//     console.log('Access to web-site is not allowed');
// }

// console.log(Boolean(hasPermission));


// Пояснення Gemini чому Boolean(hasPermission) та !!hasPermission не працюють 
// оператор !!  та глобальна функція Boolean() перетворює значення на булевий тип, ґрунтуючись на тому, чи є воно "truthy" або "falsy". Будь-який не порожній рядок (включно з 'true', 'false', 'hello') є "truthy". Тому !!'true' завжди повертатиме true, оскільки рядок 'true' сам по собі не є порожнім.
// Однак, коли ви використовуєте Boolean(), ви явно вказуєте JavaScript, що хочете отримати булеве значення. У випадку з рядками, якщо ви хочете перетворити рядок 'true' на булеве true, а рядок 'false' на булеве false, вам потрібно буде зробити це вручну або за допомогою умовної логіки, оскільки Boolean('false') теж поверне true (бо рядок 'false' не порожній і є "truthy").
// Ваша змінна hasPermission має значення 'true' (рядок). Якщо ви хочете, щоб вона стала булевим true саме тому, що її вміст є рядком "true", а не просто тому, що вона не порожня, вам потрібно буде порівняти її вміст
// hasPermission === 'true'